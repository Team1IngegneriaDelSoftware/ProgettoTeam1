// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable.core.Quaternion in improbable/core/Quaternion.schema.

namespace Improbable.Core
{

public partial struct Quaternion : global::System.IEquatable<Quaternion>, global::Improbable.Collections.IDeepCopyable<Quaternion>
{
  /// <summary>
  /// Field x = 1.
  /// </summary>
  public float x;
  /// <summary>
  /// Field y = 2.
  /// </summary>
  public float y;
  /// <summary>
  /// Field z = 3.
  /// </summary>
  public float z;
  /// <summary>
  /// Field w = 4.
  /// </summary>
  public float w;

  public Quaternion(
      float x,
      float y,
      float z,
      float w)
  {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
  }

  public static Quaternion Create()
  {
    var _result = new Quaternion();
    return _result;
  }

  public Quaternion DeepCopy()
  {
    var _result = new Quaternion();
    _result.x = x;
    _result.y = y;
    _result.z = z;
    _result.w = w;
    return _result;

  }

  public override bool Equals(object _obj)
  {
    return _obj is Quaternion && Equals((Quaternion) _obj);
  }

  public static bool operator==(Quaternion a, Quaternion b)
  {
    return a.Equals(b);
  }

  public static bool operator!=(Quaternion a, Quaternion b)
  {
    return !a.Equals(b);
  }

  public bool Equals(Quaternion _obj)
  {
    return
        x == _obj.x &&
        y == _obj.y &&
        z == _obj.z &&
        w == _obj.w;
  }

  public override int GetHashCode()
  {
    int _result = 1327;
    _result = (_result * 977) + x.GetHashCode();
    _result = (_result * 977) + y.GetHashCode();
    _result = (_result * 977) + z.GetHashCode();
    _result = (_result * 977) + w.GetHashCode();
    return _result;
  }
}

public static class Quaternion_Internal
{
  public static unsafe void Write(global::Improbable.Worker.Internal.PbioHandlePool _pool,
                                  Quaternion _data, global::Improbable.Worker.Internal.Pbio.Object* _obj)
  {
    {
      global::Improbable.Worker.Internal.Pbio.AddFloat(_obj, 1, _data.x);
    }
    {
      global::Improbable.Worker.Internal.Pbio.AddFloat(_obj, 2, _data.y);
    }
    {
      global::Improbable.Worker.Internal.Pbio.AddFloat(_obj, 3, _data.z);
    }
    {
      global::Improbable.Worker.Internal.Pbio.AddFloat(_obj, 4, _data.w);
    }
  }

  public static unsafe Quaternion Read(global::Improbable.Worker.Internal.Pbio.Object* _obj)
  {
    Quaternion _data;
    {
      _data.x = global::Improbable.Worker.Internal.Pbio.GetFloat(_obj, 1);
    }
    {
      _data.y = global::Improbable.Worker.Internal.Pbio.GetFloat(_obj, 2);
    }
    {
      _data.z = global::Improbable.Worker.Internal.Pbio.GetFloat(_obj, 3);
    }
    {
      _data.w = global::Improbable.Worker.Internal.Pbio.GetFloat(_obj, 4);
    }
    return _data;
  }
}

}
